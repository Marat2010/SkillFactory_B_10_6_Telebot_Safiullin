import requests
from aiogram.utils import json
from config import header_api, default_tickers
from config import my_redis as red
from config import url_symbols, url_convert, url_translate
import re
# import translators as ts
# import translators.server as tss


class ConvertException(Exception):
    pass


class Chat:
    @staticmethod
    def get_chat_data(chat_id: int) -> dict:
        chat_id = "chat_id_" + str(chat_id)  # –í–∏–¥ –∫–ª—é—á–∞ ('chat_id_241462113')
        if not red.keys(chat_id):
            return {}
        data = json.loads(red.get(chat_id))
        return data

    @staticmethod
    def update_chat_data(chat_id: int, data: dict) -> dict:
        settings = Chat.get_chat_data(chat_id)

        chat_id = "chat_id_" + str(chat_id)
        settings.update(data)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if data.get('kb_currency'):
            settings['kb_currency'] = str(data['kb_currency'])

        red.set(chat_id, json.dumps(settings))
        return settings


class Convertor:

    @staticmethod
    def get_all_currencies() -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç.
        {"AED": "–î–∏—Ä—Ö–∞–º –û–ê–≠", "AFN": "–ê—Ñ–≥–∞–Ω—Å–∫–∏–π –∞—Ñ–≥–∞–Ω–∏", ..}
        """
        if not red.get('all_currencies'):
            with open('symbols_rus.json', 'r') as f_curr:
                all_currencies = json.load(f_curr)
                red.set('all_currencies', json.dumps(all_currencies))
        else:
            all_currencies = json.loads(red.get('all_currencies'))
        return all_currencies

    @staticmethod
    def get_currencies(tickers: tuple = default_tickers) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç (8 —à—Ç—É–∫) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤.
        {"RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å", "USD": "–î–æ–ª–ª–∞—Ä –°—à–∞",..}
        """
        all_currencies = Convertor.get_all_currencies()
        currencies = {t: all_currencies[t] for t in tickers}
        return currencies

    @staticmethod
    def update_tickers(chat_id: int, tickers) -> tuple:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç. –í—Å–µ–≥–æ 8 —à—Ç—É–∫.
        –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
         chat_tickers - –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
         tickers - –Ω–æ–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã.
        """

        all_currencies = Convertor.get_all_currencies()

        chat_tickers = list(Chat.get_chat_data(chat_id)['tickers'])
        change_tic = [t.upper() for t in tickers[1:5]]  # ['/change', 'AED', 'KGS', 'IRR', 'KGS']
        tickers = [t for t in change_tic if (t in all_currencies.keys()) and (t not in chat_tickers)]

        chat_tickers = chat_tickers[:len(chat_tickers)-len(tickers)]
        chat_tickers.extend(tickers)
        chat_tickers = tuple(chat_tickers)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
        chat_values = {'tickers': chat_tickers,
                       'currencies': Convertor.get_currencies(chat_tickers),
                       }
        Chat.update_chat_data(chat_id, chat_values)

        return chat_tickers, tickers

    @staticmethod
    def get_price(amount, from_ticker, to_ticker):
        url_price = url_convert.format(to_ticker, from_ticker, amount)
        try:
            response = requests.request("GET", url_price, headers=header_api)
            status_code = response.status_code
        except requests.exceptions.ConnectionError as e:
            raise ConvertException(f"üò¢ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ !!!")

        if status_code != 200:
            raise ConvertException(f"üò¢ API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç !!! ( status_code: {status_code} )")
        try:
            price = json.loads(response.content)
            price = price['result']
        except KeyError as e:
            raise ConvertException(f"üò¢ API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. ({e})")

        return price

    @staticmethod
    def get_symbols() -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç: —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª.
        """
        response = requests.request("GET", url_symbols, headers=header_api)
        status_code = response.status_code
        if status_code != 200:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç ( –Ω–µ {status_code} !!!)")
        try:
            symbols = json.loads(response.content)['symbols']
        except KeyError as e:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç ({e})")

        with open('symbols.json', 'w', encoding='utf-8') as f:
            json.dump(symbols, f, indent=4, ensure_ascii=False)

        return symbols


def digit_check(s: str) -> tuple:
    n = False
    s_out = False
    if s.replace('_', '').replace('.', '', 1).isdigit():
        try:
            n = int(s)
            s_out = f"{int(s):_}"
        except ValueError:
            n = float(s)
            dot = s.split('.')  # –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–æ–π –∏ –≤–µ—â. —á–∞—Å—Ç–∏
            s_out = f"{int(dot[0]):_}"

            s_out += '.' + dot[1]
            if len(dot[1]) == 5:
                s_out += " - –°–æ–≤—Å–µ–º —Å —É–º–∞ .. ü§™, –∫–æ–ø–µ–π–∫–∏ –≤–≤–æ–¥–∏—Ç—å üòÇüòÇüòÇ  "

    return n, s_out


def ticker_check(ticker: str, all_currencies: dict) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–æ–≤ –≤–∞–ª—é—Ç
    """
    tick = all_currencies.get(ticker.upper())

    if tick:
        tick = ticker.upper()
    else:
        for t, c in all_currencies.items():  # (TND, –¢—É–Ω–∏—Å—Å–∫–∏–π –¥–∏–Ω–∞—Ä)
            if re.search(ticker.lower(), c.lower()):
                tick = t.upper()
                return tick  # –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
    return tick


def input_str_check(chat_id: int, s: str) -> dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏
    """

    try:
        num_str, from_ticker, to_ticker = s.split()
    except ValueError:
        sh_input_num = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!!!\n –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –∏ –¥–≤–µ –≤–∞–ª—é—Ç—ã!"
        return {'rez': False, 'converted_text': sh_input_num, 'change_tic': False}

    num, str_out = digit_check(num_str)  # num: —á–∏—Å–ª–æ –∏–ª–∏ False, str_out: —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª –¥–ª—è –≤—ã–≤–æ–¥–∞

    if num:
        sh_input_num = str_out
    else:
        sh_input_num = f"{num_str}  -  –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!!!"
        return {'rez': False, 'converted_text': sh_input_num, 'change_tic': False}

    # -------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ --------
    all_currencies = Convertor.get_all_currencies()

    from_tick = ticker_check(from_ticker, all_currencies)
    to_tick = ticker_check(to_ticker, all_currencies)
    change_tic = False  # –¢–∏–∫–µ—Ä—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    if not from_tick:
        num = False
        converted_text = f"{from_ticker}  - –¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç!!! ü§™"
    elif not to_tick:
        num = False
        converted_text = f"{to_ticker}  - –¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç!!! ü§™"
    elif from_tick == to_tick:
        num = False
        converted_text = f" –í–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏!!! ü§™"
    else:
        try:
            # converted_sum = 12345.678912  # –î–ª—è —Ç–µ—Å—Ç–∞, –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
            converted_sum = Convertor.get_price(num, from_tick, to_tick)
            converted_sum = f"{converted_sum: _.4f}"
        except ConvertException as e:
            converted_sum = f"{e}"

        tickers = ['/change', from_tick, to_tick]
        chat_tickers, change_tic = Convertor.update_tickers(chat_id, tickers)
        result = [sh_input_num, from_tick, converted_sum, to_tick]
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
        settings = Chat.update_chat_data(chat_id, {'result': result})
        currencies = settings.get('currencies')

        converted_text = f"{sh_input_num}  {from_tick} ({currencies[from_tick]})  =" \
                         f"  {converted_sum}  {to_tick} ({currencies[to_tick]})\n"

    return {'rez': num, 'converted_text': converted_text, 'change_tic': change_tic}

# ________________________________________________________
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ, –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç.
    # @staticmethod
    # def translate(text):
    #     from_language, to_language = 'en', 'ru'
    #     result = tss.google(text, from_language, to_language)
    #     return result
# ________________________________________________________


if __name__ == '__main__':
    pass

