import requests
from aiogram.utils import json
from config import headers, default_tickers
from config import my_redis as red
# import ujson
# import translators as ts
# import translators.server as tss

url_symbols = "https://api.apilayer.com/exchangerates_data/symbols"
url_translate = "https://api.apilayer.com/language_translation/translate?target=ru"
# url_convert = "https://api.apilayer.com/exchangerates_data/convert?to={RUB}&from={EUR}&amount={300}"
url_convert = "https://api.apilayer.com/exchangerates_data/convert?to={}&from={}&amount={}"


class ConvertException(Exception):
    pass


class Chat:
    @staticmethod
    def get_chat_data(chat_id: int) -> dict:
        chat_id = "chat_id_" + str(chat_id)  # –í–∏–¥ –∫–ª—é—á–∞ ('chat_id_241462113')
        if not red.keys(chat_id):
            return {}
        data = json.loads(red.get(chat_id))
        return data

    @staticmethod
    def set_chat_data(chat_id: int, data: dict) -> dict:
        settings = Chat.get_chat_data(chat_id)

        chat_id = "chat_id_" + str(chat_id)
        settings.update(data)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if data.get('kb_currency'):
            settings['kb_currency'] = str(data['kb_currency'])

        red.set(chat_id, json.dumps(settings))
        return settings


class Convertor:

    @staticmethod
    def get_currencies(tickers: tuple = default_tickers) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç (8 —à—Ç—É–∫) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤.
        {"RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å", "USD": "–î–æ–ª–ª–∞—Ä –°—à–∞",..}
        """

        with open('symbols_rus.json', 'r') as f_curr:
            all_currencies = json.load(f_curr)

        currencies = {t: all_currencies[t] for t in tickers}
        return currencies

    @staticmethod
    def update_tickers(chat_id: int, tickers):
        with open('symbols_rus.json', 'r') as f_tickers:
            all_currencies = json.load(f_tickers)

        chat_tickers = list(Chat.get_chat_data(chat_id)['tickers'])
        change_tic = [t.upper() for t in tickers[1:5]]  # ['/change', 'AED', 'KGS', 'IRR', 'KGS']
        tickers = [t for t in change_tic if (t in all_currencies.keys()) and (t not in chat_tickers)]

        chat_tickers = chat_tickers[:len(chat_tickers)-len(tickers)]
        chat_tickers.extend(tickers)
        chat_tickers = tuple(chat_tickers)

        return chat_tickers, tickers

    @staticmethod
    def get_price(amount, from_ticker, to_ticker):
        url_price = url_convert.format(to_ticker, from_ticker, amount)
        response = requests.request("GET", url_price, headers=headers)
        status_code = response.status_code

        if status_code != 200:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç ( –Ω–µ {status_code} !!!)")
        try:
            price = json.loads(response.content)
        except KeyError as e:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –≤–∞–ª—é—Ç ({e})")

        return price['result']

    @staticmethod
    def get_symbols() -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç: —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª.
        """
        response = requests.request("GET", url_symbols, headers=headers)
        status_code = response.status_code
        if status_code != 200:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç ( –Ω–µ {status_code} !!!)")
        try:
            symbols = json.loads(response.content)['symbols']
        except KeyError as e:
            raise ConvertException(f"API –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä: –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç ({e})")

        with open('symbols.json', 'w', encoding='utf-8') as f:
            json.dump(symbols, f, indent=4, ensure_ascii=False)

        return symbols

# ------------------------------------
# def digit_check(s: str) -> str:
#     try:
#         float(s)
#         print("===1===")
#     except ValueError:
#         print("===2===")
#         return f"= NO FLOAT =: {s}"
#
#     try:
#         int(s)
#         s = f"{int(s): _}"
#         print("===3===")
#     except ValueError:
#         s = f"{float(s): _.2f}"
#         print("===4===")
#         return s
#
#     return s
# ------------------------------------


def digit_check(s: str) -> tuple:
    n = False
    s_out = False
    if s.replace('_', '').replace('.', '', 1).isdigit():
        try:
            n = int(s)
            s_out = f"{int(s):_}"
        except ValueError:
            n = float(s)
            dot = s.split('.')  # –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–æ–π –∏ –≤–µ—â. —á–∞—Å—Ç–∏
            s_out = f"{int(dot[0]):_}"

            s_out += '.' + dot[1]
            # if len(dot[1]) > 4:
            if len(dot[1]) == 5:
                s_out += " - –°–æ–≤—Å–µ–º —Å —É–º–∞ .. ü§™, –∫–æ–ø–µ–π–∫–∏ –≤–≤–æ–¥–∏—Ç—å üòÇüòÇüòÇ  "

    print(f"==DIGIT=={n}==, =={s_out}==")
    return n, s_out


# ________________________________________________________
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ, –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç.
    # @staticmethod
    # def translate(text):
    #     from_language, to_language = 'en', 'ru'
    #     result = tss.google(text, from_language, to_language)
    #     return result
# ________________________________________________________


if __name__ == '__main__':
    pass
    # amount = 300
    # from_ticker = 'RUB'
    # to_ticker = 'USD'
    #
    # rez = Convertor.get_price(amount, from_ticker, to_ticker)
    # print("rez:", rez)  # rez: {
    #                             # 'success': True,
    #                             # 'query': {'from': 'RUB', 'to': 'USD', 'amount': 300},
    #                             # 'info': {'timestamp': 1678413783, 'rate': 0.013184},
    #                             # 'date': '2023-03-10',
    #                             # 'result': 3.9552
    #                             # }


# _____________________________________________________________
    # def get_price(base, sym, amount):

# _____________________________________________________________
# https://apilayer.com/marketplace/exchangerates_data-api?_gl=1*3mtuzh*_ga*MTA5NDQ3NzY4Ny4xNjc3NTM0Njg0*_ga_HGV43FGGVM*MTY3NzUzNDY4NC4xLjEuMTY3NzUzNDY5MS41My4wLjA.%3Fe=Sign+In&l=Success?e=Sign+In&l=Success
# # _____________________________________________________________
# import requests
#
# url = "https://api.apilayer.com/exchangerates_data/convert?to=RUB&from=EUR&amount=300"
#
# payload = {}
# headers= {
#   "apikey": "wr4DkR1tK5Klzvnsh61PWAVuxM8SxmSM"
# }
#
# response = requests.request("GET", url, headers=headers, data = payload)
#
# status_code = response.status_code
# result = response.text
#
# ---------result------------
# {
#   "date": "2023-03-10",
#   "info": {
#     "rate": 80.363442,
#     "timestamp": 1678412522
#   },
#   "query": {
#     "amount": 300,
#     "from": "EUR",
#     "to": "RUB"
#   },
#   "result": 24109.0326,
#   "success": true
# }

# _____________________________________________________________
# _____________________________________________________________
# s_out = f"{float(s):_.2f}"
# _____________________________________________________________
    # r = Convertor().get_default_currencies()
    # print("===R==", r)

    # with open('symbols.json', 'r') as f:
    #     curr = ujson.load(f)
    #
    # print("==CUR== ", type(curr), "== ", curr)
    #
    # curr_lst = [*curr]
    # print(type(curr_lst), "==<>=", curr_lst)
    # rez = Convertor.get_default_currencies(curr_lst[0:10])
    # print("== ", type(rez), "--== ", rez)
# _____________________________________________________________
    # def __init__(self):
    #     self.input_str = ''
    #     self.old_input_str = ''
    #     self.default_currencies = {}  # –°–ª–æ–≤–∞—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç {"RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å", "USD": "–î–æ–ª–ª–∞—Ä –°—à–∞",..}
    #     self.tickers = default_tickers  # –¢–∏–∫–µ—Ä—ã ['RUB', 'USD',..]
    #     # self.de   fault_currencies = self.get_default_currencies()  # –°–ª–æ–≤–∞—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º

# _____________________________________________________________
# for k in data:  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
#     settings[k] = data[k]  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Redis
# settings = {t: data[t] for t in data}

# _____________________________________________________________
# currencies = {}
# for t in tickers:
#     currencies[t] = all_currencies[t]
# _____________________________________________________________
# # settings.update(data)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# _____________________________________________________________
# input_str = red.hget(chat_id, 'input_str').decode("utf-8")
# old_input_str = red.hget(chat_id, 'old_input_str').decode("utf-8")
# tickers = red.hget(chat_id, 'tickers').decode("utf-8")
# currencies = red.hget(chat_id, 'currencies').decode("utf-8")
# kb_currency = red.hget(chat_id, 'kb_currency').decode("utf-8")
#
# data = {
#     'input_str': input_str,
#     'old_input_str': old_input_str,
#     'tickers': tickers,
#     'currencies': currencies,
#     'kb_currency': kb_currency
# }

# –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Json:
# red.set(chat_id, json.dumps(data))
# ----------------------
# data = red.hset(chat_id, mapping=settings)

# –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Json:
# red.set(chat_id, json.dumps(settings))
# settings = json.loads(red.get(chat_id))
# _____________________________________________________________
# _____________________________________________________________
#     @staticmethod  # Old get_default_currencies
#     def get_default_currencies(currencies=default_currencies):
#         cur = Convertor.get_symbols()
#         cur_lst = [cur[i] for i in currencies]
#         text_cur = ', '.join(cur_lst)
#
#         print('====text_cur==', text_cur)
#         translate_text = Convertor.translate(text_cur)
#
#         translate_list = translate_text.split(', ')
#         print('====translate_list==', translate_list)
#
#         russ_dict = {}
#         for i, n in enumerate(currencies):
#             russ_dict[n] = translate_list[i]
#
#         # with open('symbols_rus.json', 'w')as f:
#         with open('symbols_rus.json', 'w', encoding='utf-8')as f:
#             ujson.dump(russ_dict, f, indent=4, ensure_ascii=False)
#         return russ_dict
# _____________________________________________________________
# print(f"==SELF.Tick: {self.tickers} = TICKERS_ADD= {tickers}")

# --------------------------------------
# –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ yandex:
# trnsl.1.1.20190928T185613Z.4d1d79f81bf497a8.75037b63bf025f65040895814428eadc0438f8a4
# y0_AgAAAAAZ6ZusAATuwQAAAADdPo09OomlTIczQtiWIzErogrfsWFeWxs
# russ_dict[n] = {translate_list[i] for i, n in enumerate(default_currencies)}
# ------------------------------------------------------
# {
#  "iamToken": "t1.9euelZrOi8fMnZ6az5uUk5fIz52Pxu3rnpWalJKSnMqdzo6el4nOyIrMmIzl8_dbWw9g-e8Gdi5m_t3z9xsKDWD57wZ2Lmb-.gPf3so4McXjI8zuzxpTwpeekiHVMQWZUooXpEb2ChP0wbnuAsIKruny4JIbc2IjlHoXSnFDmVnPt5jYci8UbDQ",
#  "expiresAt": "2023-02-27T14:15:00.322192633Z"
# }
# ------------------------------------------------------
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ IAM-—Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é CLI
# export IAM_TOKEN=`yc iam create-token`
# curl -H "Authorization: Bearer ${IAM_TOKEN}" \
#   https://resource-manager.api.cloud.yandex.net/resource-manager/v1/clouds

# Authorization: Bearer <IAM-—Ç–æ–∫–µ–Ω>

# --------------------------------------
    # rez = Convertor.get_default_currencies(curr_lst)
    # rez = Convertor.get_default_currencies()
# --------------------------------------
# --------------------------------------
# --------------------------------------
# result = tss.alibaba(text, professional_field='general')
# result = tss.alibaba(text, from_language, to_language)
# print('=== Trans google==', result)
# ------------------------------------------------------
# import requests
#
# url = "https://api.apilayer.com/exchangerates_data/convert?to=RUB&from=EUR&amount=300"
#
# payload = {}
# headers= {
#   "apikey": "wr4DkR1tK5Klzvnsh61PWAVuxM8SxmSM"
# }
#
# response = requests.request("GET", url, headers=headers, data=payload)
#
# status_code = response.status_code
# result = response.text
#
# print("--1--:", result)
# print("--2--:", payload)
# ------------------------------------------------------
# {
#     "success": true,
#     "query": {
#         "from": "EUR",
#         "to": "RUB",
#         "amount": 300
#     },
#     "info": {
#         "timestamp": 1677538563,
#         "rate": 79.473818
#     },
#     "date": "2023-02-27",
#     "result": 23842.1454
# }
# ------------------------------------------------------
        # check input language with language_map
        # assert from_language in tss._google.language_map  # request once first, then

        # payload = text.encode("utf-8")
        # # payload = text.encode()
        # payload = text
        # print("====payload==== ", payload)
        # response = requests.request("POST", url_translate, headers=headers, data=payload)
        # status_code = response.status_code
        # print("wwwwww--payload===", payload)
        # print("wwwwww--status_code===", status_code)
        # print("wwwwww--response.content===", response.content)
        # result = ujson.loads(response.content)['translations'][0]['translation']


    # def translate(text):
    #     # payload = text.encode("utf-8")
    #     # payload = text.encode()
    #     payload = text
    #     print("====payload==== ", payload)
    #     response = requests.request("POST", url_translate, headers=headers, data=payload)
    #     status_code = response.status_code
    #     print("wwwwww--payload===", payload)
    #     print("wwwwww--status_code===", status_code)
    #     print("wwwwww--response.content===", response.content)
    #     result = ujson.loads(response.content)['translations'][0]['translation']
    #     return result

# ------------------------------------------------------
# url = "https://api.apilayer.com/exchangerates_data/symbols"
# –†–µ–∑—É–ª—å—Ç–∞—Ç:
# all_symbols = {
#     "success": true,
#     "symbols": {
#         "AED": "United Arab Emirates Dirham",
#         "AFN": "Afghan Afghani",
#         "ALL": "Albanian Lek",
#         "AMD": "Armenian Dram",
#         "ANG": "Netherlands Antillean Guilder",
#         "AOA": "Angolan Kwanza",
#         "ARS": "Argentine Peso",
#         "AUD": "Australian Dollar",
#         "AWG": "Aruban Florin",
#         "AZN": "Azerbaijani Manat",
#         "BAM": "Bosnia-Herzegovina Convertible Mark",
#         "BBD": "Barbadian Dollar",
#         "BDT": "Bangladeshi Taka",
#         "BGN": "Bulgarian Lev",
#         "BHD": "Bahraini Dinar",
#         "BIF": "Burundian Franc",
#         "BMD": "Bermudan Dollar",
#         "BND": "Brunei Dollar",
#         "BOB": "Bolivian Boliviano",
#         "BRL": "Brazilian Real",
#         "BSD": "Bahamian Dollar",
#         "BTC": "Bitcoin",
#         "BTN": "Bhutanese Ngultrum",
#         "BWP": "Botswanan Pula",
#         "BYN": "New Belarusian Ruble",
#         "BYR": "Belarusian Ruble",
#         "BZD": "Belize Dollar",
#         "CAD": "Canadian Dollar",
#         "CDF": "Congolese Franc",
#         "CHF": "Swiss Franc",
#         "CLF": "Chilean Unit of Account (UF)",
#         "CLP": "Chilean Peso",
#         "CNY": "Chinese Yuan",
#         "COP": "Colombian Peso",
#         "CRC": "Costa Rican Col\u00f3n",
#         "CUC": "Cuban Convertible Peso",
#         "CUP": "Cuban Peso",
#         "CVE": "Cape Verdean Escudo",
#         "CZK": "Czech Republic Koruna",
#         "DJF": "Djiboutian Franc",
#         "DKK": "Danish Krone",
#         "DOP": "Dominican Peso",
#         "DZD": "Algerian Dinar",
#         "EGP": "Egyptian Pound",
#         "ERN": "Eritrean Nakfa",
#         "ETB": "Ethiopian Birr",
#         "EUR": "Euro",
#         "FJD": "Fijian Dollar",
#         "FKP": "Falkland Islands Pound",
#         "GBP": "British Pound Sterling",
#         "GEL": "Georgian Lari",
#         "GGP": "Guernsey Pound",
#         "GHS": "Ghanaian Cedi",
#         "GIP": "Gibraltar Pound",
#         "GMD": "Gambian Dalasi",
#         "GNF": "Guinean Franc",
#         "GTQ": "Guatemalan Quetzal",
#         "GYD": "Guyanaese Dollar",
#         "HKD": "Hong Kong Dollar",
#         "HNL": "Honduran Lempira",
#         "HRK": "Croatian Kuna",
#         "HTG": "Haitian Gourde",
#         "HUF": "Hungarian Forint",
#         "IDR": "Indonesian Rupiah",
#         "ILS": "Israeli New Sheqel",
#         "IMP": "Manx pound",
#         "INR": "Indian Rupee",
#         "IQD": "Iraqi Dinar",
#         "IRR": "Iranian Rial",
#         "ISK": "Icelandic Kr\u00f3na",
#         "JEP": "Jersey Pound",
#         "JMD": "Jamaican Dollar",
#         "JOD": "Jordanian Dinar",
#         "JPY": "Japanese Yen",
#         "KES": "Kenyan Shilling",
#         "KGS": "Kyrgystani Som",
#         "KHR": "Cambodian Riel",
#         "KMF": "Comorian Franc",
#         "KPW": "North Korean Won",
#         "KRW": "South Korean Won",
#         "KWD": "Kuwaiti Dinar",
#         "KYD": "Cayman Islands Dollar",
#         "KZT": "Kazakhstani Tenge",
#         "LAK": "Laotian Kip",
#         "LBP": "Lebanese Pound",
#         "LKR": "Sri Lankan Rupee",
#         "LRD": "Liberian Dollar",
#         "LSL": "Lesotho Loti",
#         "LTL": "Lithuanian Litas",
#         "LVL": "Latvian Lats",
#         "LYD": "Libyan Dinar",
#         "MAD": "Moroccan Dirham",
#         "MDL": "Moldovan Leu",
#         "MGA": "Malagasy Ariary",
#         "MKD": "Macedonian Denar",
#         "MMK": "Myanma Kyat",
#         "MNT": "Mongolian Tugrik",
#         "MOP": "Macanese Pataca",
#         "MRO": "Mauritanian Ouguiya",
#         "MUR": "Mauritian Rupee",
#         "MVR": "Maldivian Rufiyaa",
#         "MWK": "Malawian Kwacha",
#         "MXN": "Mexican Peso",
#         "MYR": "Malaysian Ringgit",
#         "MZN": "Mozambican Metical",
#         "NAD": "Namibian Dollar",
#         "NGN": "Nigerian Naira",
#         "NIO": "Nicaraguan C\u00f3rdoba",
#         "NOK": "Norwegian Krone",
#         "NPR": "Nepalese Rupee",
#         "NZD": "New Zealand Dollar",
#         "OMR": "Omani Rial",
#         "PAB": "Panamanian Balboa",
#         "PEN": "Peruvian Nuevo Sol",
#         "PGK": "Papua New Guinean Kina",
#         "PHP": "Philippine Peso",
#         "PKR": "Pakistani Rupee",
#         "PLN": "Polish Zloty",
#         "PYG": "Paraguayan Guarani",
#         "QAR": "Qatari Rial",
#         "RON": "Romanian Leu",
#         "RSD": "Serbian Dinar",
#         "RUB": "Russian Ruble",
#         "RWF": "Rwandan Franc",
#         "SAR": "Saudi Riyal",
#         "SBD": "Solomon Islands Dollar",
#         "SCR": "Seychellois Rupee",
#         "SDG": "Sudanese Pound",
#         "SEK": "Swedish Krona",
#         "SGD": "Singapore Dollar",
#         "SHP": "Saint Helena Pound",
#         "SLE": "Sierra Leonean Leone",
#         "SLL": "Sierra Leonean Leone",
#         "SOS": "Somali Shilling",
#         "SRD": "Surinamese Dollar",
#         "STD": "S\u00e3o Tom\u00e9 and Pr\u00edncipe Dobra",
#         "SVC": "Salvadoran Col\u00f3n",
#         "SYP": "Syrian Pound",
#         "SZL": "Swazi Lilangeni",
#         "THB": "Thai Baht",
#         "TJS": "Tajikistani Somoni",
#         "TMT": "Turkmenistani Manat",
#         "TND": "Tunisian Dinar",
#         "TOP": "Tongan Pa\u02bbanga",
#         "TRY": "Turkish Lira",
#         "TTD": "Trinidad and Tobago Dollar",
#         "TWD": "New Taiwan Dollar",
#         "TZS": "Tanzanian Shilling",
#         "UAH": "Ukrainian Hryvnia",
#         "UGX": "Ugandan Shilling",
#         "USD": "United States Dollar",
#         "UYU": "Uruguayan Peso",
#         "UZS": "Uzbekistan Som",
#         "VEF": "Venezuelan Bol\u00edvar Fuerte",
#         "VES": "Sovereign Bolivar",
#         "VND": "Vietnamese Dong",
#         "VUV": "Vanuatu Vatu",
#         "WST": "Samoan Tala",
#         "XAF": "CFA Franc BEAC",
#         "XAG": "Silver (troy ounce)",
#         "XAU": "Gold (troy ounce)",
#         "XCD": "East Caribbean Dollar",
#         "XDR": "Special Drawing Rights",
#         "XOF": "CFA Franc BCEAO",
#         "XPF": "CFP Franc",
#         "YER": "Yemeni Rial",
#         "ZAR": "South African Rand",
#         "ZMK": "Zambian Kwacha (pre-2013)",
#         "ZMW": "Zambian Kwacha",
#         "ZWL": "Zimbabwean Dollar"
#     }
# }

# ------------------------------------
# "—Å–∏–º–≤–æ–ª—ã": {
# "AED": "–î–∏—Ä—Ö–∞–º –û–ê–≠",
# "AFN": "–ê—Ñ–≥–∞–Ω—Å–∫–∏–π –∞—Ñ–≥–∞–Ω–∏",
# "ALL": "–ê–ª–±–∞–Ω—Å–∫–∏–π –ª–µ–∫",
# "AMD": "–ê—Ä–º—è–Ω—Å–∫–∏–π –î—Ä–∞–º",
# "ANG": "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π –∞–Ω—Ç–∏–ª—å—Å–∫–∏–π –≥—É–ª—å–¥–µ–Ω",
# "AOA": "–ê–Ω–≥–æ–ª—å—Å–∫–∞—è –∫–≤–∞–Ω–∑–∞",
# "ARS": "–ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ",
# "AUD": "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "AWG": "–ê—Ä—É–±–∞–Ω—Å–∫–∏–π –§–ª–æ—Ä–∏–Ω",
# "AZN": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç",
# "BAM": "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º–∞—è –º–∞—Ä–∫–∞ –ë–æ—Å–Ω–∏–∏ –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω—ã",
# "BBD": "–±–∞—Ä–±–∞–¥–æ—Å—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "BDT": "–ë–∞–Ω–≥–ª–∞–¥–µ—à—Å–∫–∞—è —Ç–∞–∫–∞",
# "BGN": "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –õ–µ–≤",
# "BHD": "–±–∞—Ö—Ä–µ–π–Ω—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "BIF": "–ë—É—Ä—É–Ω–¥–∏–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "BMD": "–ë–µ—Ä–º—É–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "BND": "–ë—Ä—É–Ω–µ–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "BOB": "–ë–æ–ª–∏–≤–∏–π—Å–∫–∏–π –ë–æ–ª–∏–≤–∏–∞–Ω–æ",
# "BRL": "–±—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª",
# "BSD": "–ë–∞–≥–∞–º—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "BTC": "–ë–∏—Ç–∫–æ–π–Ω",
# "BTN": "–ë—É—Ç–∞–Ω—Å–∫–∏–π –Ω–≥—É–ª—Ç—Ä—É–º",
# "BWP": "–ë–æ—Ç—Å–≤–∞–Ω—Å–∫–∞—è –ø—É–ª–∞",
# "BYN": "–ù–æ–≤—ã–π –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å",
# "BYR": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å",
# "BZD": "–ë–µ–ª–∏–∑—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "CAD": "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "CDF": "–ö–æ–Ω–≥–æ–ª–µ–∑—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "CHF": "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "CLF": "–ß–∏–ª–∏–π—Å–∫–∞—è —Ä–∞—Å—á–µ—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ (UF)",
# "CLP": "–ß–∏–ª–∏–π—Å–∫–æ–µ –ø–µ—Å–æ",
# "CNY": "–∫–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å",
# "COP": "–ö–æ–ª—É–º–±–∏–π—Å–∫–æ–µ –ø–µ—Å–æ",
# "CRC": "–ö–æ—Å—Ç–∞-—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü",
# "CUC": "–ö—É–±–∏–Ω—Å–∫–æ–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º–æ–µ –ø–µ—Å–æ",
# "–ß–ê–®–ö–ê": "–ö—É–±–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ",
# "CVE": "–≠—Å–∫—É–¥–æ –ö–∞–±–æ-–í–µ—Ä–¥–µ",
# "CZK": "–ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞",
# "DJF": "–î–∂–∏–±—É—Ç–∏–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "DKK": "–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞",
# "DOP": "–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∏–π –ø–µ—Å–æ",
# "DZD": "–ê–ª–∂–∏—Ä—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "EGP": "–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "ERN": "–≠—Ä–∏—Ç—Ä–µ–π—Å–∫–∞—è –Ω–∞–∫—Ñ–∞",
# "ETB": "–≠—Ñ–∏–æ–ø—Å–∫–∏–π –±—ã—Ä",
# "–ï–í–†–û": "–ï–≤—Ä–æ",
# "FJD": "—Ñ–∏–¥–∂–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "FKP": "–§—É–Ω—Ç –§–æ–ª–∫–ª–µ–Ω–¥—Å–∫–∏—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤",
# "GBP": "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤",
# "GEL": "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏",
# "GGP": "–§—É–Ω—Ç –ì–µ—Ä–Ω—Å–∏",
# "GHS": "–ì–∞–Ω—Å–∫–∏–π —Å–µ–¥–∏",
# "GIP": "–ì–∏–±—Ä–∞–ª—Ç–∞—Ä—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "GMD": "–≥–∞–º–±–∏–π—Å–∫–∏–π –¥–∞–ª–∞—Å–∏",
# "GNF": "–ì–≤–∏–Ω–µ–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "GTQ": "–ì–≤–∞—Ç–µ–º–∞–ª—å—Å–∫–∏–π –∫–µ—Ç—Å–∞–ª—å",
# "GYD": "–ì–∞–π–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "HKD": "–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "HNL": "–≥–æ–Ω–¥—É—Ä–∞—Å—Å–∫–∞—è –ª–µ–º–ø–∏—Ä–∞",
# "HRK": "–•–æ—Ä–≤–∞—Ç—Å–∫–∞—è –∫—É–Ω–∞",
# "HTG": "–ì–∞–∏—Ç—è–Ω—Å–∫–∏–π –≥—É—Ä–¥",
# "HUF": "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç",
# "IDR": "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è",
# "ILS": "–ù–æ–≤—ã–π –∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —à–µ–∫–µ–ª—å",
# "IMP": "–ú—ç–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "INR": "–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è",
# "IQD": "–ò—Ä–∞–∫—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "IRR": "–ò—Ä–∞–Ω—Å–∫–∏–π —Ä–∏–∞–ª",
# "ISK": "–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π Kr\u00f3na",
# "JEP": "–î–∂–µ—Ä—Å–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "JMD": "–Ø–º–∞–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "JOD": "–ò–æ—Ä–¥–∞–Ω—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "JPY": "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞",
# "KES": "–ö–µ–Ω–∏–π—Å–∫–∏–π —à–∏–ª–ª–∏–Ω–≥",
# "KGS": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —Å–æ–º",
# "KHR": "–∫–∞–º–±–æ–¥–∂–∏–π—Å–∫–∏–π —Ä–∏–µ–ª—å",
# "KMF": "–ö–æ–º–æ—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "KPW": "–°–µ–≤–µ—Ä–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞",
# "KRW": "–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∏–π –≤–æ–Ω",
# "KWD": "–ö—É–≤–µ–π—Ç—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "KYD": "–î–æ–ª–ª–∞—Ä –ö–∞–π–º–∞–Ω–æ–≤—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤",
# "KZT": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ",
# "LAK": "–ª–∞–æ—Å—Å–∫–∏–π –∫–∏–ø",
# "LBP": "–ª–∏–≤–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "LKR": "–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è",
# "LRD": "–ª–∏–±–µ—Ä–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "LSL": "–õ–µ—Å–æ—Ç–æ –õ–æ—Ç–∏",
# "LTL": "–õ–∏—Ç–æ–≤—Å–∫–∏–µ –ª–∏—Ç—ã",
# "LVL": "–õ–∞—Ç–≤–∏–π—Å–∫–∏–µ –ª–∞—Ç—ã",
# "LYD": "–ª–∏–≤–∏–π—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "MAD": "–ú–∞—Ä–æ–∫–∫–∞–Ω—Å–∫–∏–π –¥–∏—Ä—Ö–∞–º",
# "MDL": "–ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π",
# "MGA": "–ú–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π –ê—Ä–∏–∞—Ä–∏",
# "–ú–ö–î": "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π –¥–µ–Ω–∞—Ä",
# "–ú–ú–ö": "–ú—å—è–Ω–º–∞ –ö—å—è—Ç",
# "MNT": "–º–æ–Ω–≥–æ–ª—å—Å–∫–∏–π —Ç—É–≥—Ä–∏–∫",
# "MOP": "–ú–∞–∫–∞–Ω–µ—Å—Å–∫–∞—è –ø–∞—Ç–∞–∫–∞",
# "MRO": "–º–∞–≤—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —É–≥–∏—è",
# "MUR": "–º–∞–≤—Ä–∏–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è",
# "MVR": "–ú–∞–ª—å–¥–∏–≤—Å–∫–∞—è —Ä—É—Ñ–∏—è",
# "MWK": "–º–∞–ª–∞–≤–∏–π—Å–∫–∞—è –∫–≤–∞—á–∞",
# "MXN": "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–µ –ø–µ—Å–æ",
# "MYR": "–ú–∞–ª–∞–π–∑–∏–π—Å–∫–∏–π —Ä–∏–Ω–≥–≥–∏—Ç",
# "–ú–ó–ù": "–ú–æ–∑–∞–º–±–∏–∫—Å–∫–∏–π –º–µ—Ç–∏–∫–∞–ª",
# "NAD": "–î–æ–ª–ª–∞—Ä –ù–∞–º–∏–±–∏–∏",
# "NGN": "–ù–∏–≥–µ—Ä–∏–π—Å–∫–∞—è –ù–∞–π—Ä–∞",
# "NIO": "–ù–∏–∫–∞—Ä–∞–≥—É–∞–Ω—Å–∫–∞—è –∫–∞—Ä–¥–æ–±–∞",
# "NOK": "–Ω–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞",
# "NPR": "–ù–µ–ø–∞–ª—å—Å–∫–∞—è —Ä—É–ø–∏—è",
# "NZD": "–î–æ–ª–ª–∞—Ä –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏",
# "OMR": "–û–º–∞–Ω—Å–∫–∏–π —Ä–∏–∞–ª",
# "PAB": "–ø–∞–Ω–∞–º—Å–∫–∏–π –±–∞–ª—å–±–æ–∞",
# "PEN": "–ü–µ—Ä—É–∞–Ω—Å–∫–∏–π –ù—É—ç–≤–æ –°–æ–ª—å",
# "PGK": "–ö–∏–Ω–∞ –ü–∞–ø—É–∞-–ù–æ–≤–æ–π –ì–≤–∏–Ω–µ–∏",
# "PHP": "–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ",
# "PKR": "–ü–∞–∫–∏—Å—Ç–∞–Ω—Å–∫–∞—è —Ä—É–ø–∏—è",
# "PLN": "–ü–æ–ª—å—Å–∫–∏–µ –∑–ª–æ—Ç—ã–µ",
# "PYG": "–ø–∞—Ä–∞–≥–≤–∞–π—Å–∫–∏–π –≥—É–∞—Ä–∞–Ω–∏",
# "QAR": "–ö–∞—Ç–∞—Ä—Å–∫–∏–π —Ä–∏–∞–ª",
# "RON": "—Ä—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π",
# "RSD": "—Å–µ—Ä–±—Å–∫–∏–π –¥–∏–Ω–∞—Ä",
# "RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
# "RWF": "–†—É–∞–Ω–¥–∏–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
# "SAR": "–°–∞—É–¥–æ–≤—Å–∫–∏–π —Ä–∏–∞–ª",
# "SBD": "–î–æ–ª–ª–∞—Ä –°–æ–ª–æ–º–æ–Ω–æ–≤—ã—Ö –û—Å—Ç—Ä–æ–≤–æ–≤",
# "SCR": "–°–µ–π—à–µ–ª—å—Å–∫–∞—è —Ä—É–ø–∏—è",
# "SDG": "–°—É–¥–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç",
# "SEK": "–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞",
# "SGD": "–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# "SHP": "–§—É–Ω—Ç –°–≤—è—Ç–æ–π –ï–ª–µ–Ω—ã",
# "–°–ö–í": "–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ–∞–Ω –õ–µ–æ–Ω–µ",
# "SLL": "–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ–∞–Ω –õ–µ–æ–Ω–µ",
# "SOS": "–°–æ–º–∞–ª–∏–π—Å–∫–∏–π —à–∏–ª–ª–∏–Ω–≥",
# "SRD": "–°—É—Ä–∏–Ω–∞–º—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
# -----------------
# 'S√£o Tom√© and Pr√≠ncipe Dobra'
# –°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏ –î–æ–±—Ä–∞
# –î–æ–±—Ä–∞ –°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏
# –≠—Ç–æ –¢–æ–º –∏ –ü—Ä–µ–Ω—Å–∏–ø–∏ –î–æ–±—Ä–∞
# -----------------
# "STD": "–î–æ–±—Ä–∞ –°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏"
# "SVC": "–°–∞–ª—å–≤–∞–¥–æ—Ä—Å–∫–∏–π —Å—Ç–æ–ª–±"
# "SYP": "–°–∏—Ä–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç"
# "SZL": "–°–≤–∞–∑–∏–ª–µ–Ω–¥"
# "THB": "–¢–∞–π—Å–∫–∏–π –±–∞—Ç"
# "TJS": "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω—Å–∫–∏–µ —Å–æ–º–æ–Ω–∏",
# "–¢–ú–¢": "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç",
# "TND": "–¢—É–Ω–∏—Å—Å–∫–∏–π –¥–∏–Ω–∞—Ä"
# "TOP": "–¢–æ–Ω–≥–∞–Ω—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
# "TRY": "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞"
# "TTD": "–î–æ–ª–ª–∞—Ä –¢—Ä–∏–Ω–∏–¥–∞–¥–∞ –∏ –¢–æ–±–∞–≥–æ"
# "TWD": "–ù–æ–≤—ã–π —Ç–∞–π–≤–∞–Ω—å—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä"
# "TZS": "–¢–∞–Ω–∑–∞–Ω–∏–π—Å–∫–∏–π —à–∏–ª–ª–∏–Ω–≥"
# "UAH": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞"
# "UGX": "–£–≥–∞–Ω–¥–∏–π—Å–∫–∏–π —à–∏–ª–ª–∏–Ω–≥",
# "USD": "–î–æ–ª–ª–∞—Ä –°–®–ê"
# "UYU": "–£—Ä—É–≥–≤–∞–π—Å–∫–æ–µ –ø–µ—Å–æ",
# "UZS": "–£–∑–±–µ–∫—Å–∫–∏–π —Å–æ–º"
# "–í–≠–§": "–í–µ–Ω–µ—Å—É—ç–ª–∞ —Ñ—É—Ç–±–æ–ª —Å–∏–ª—å–Ω—ã–π"
# "–í–ï–°–¨": "–ì–æ—Å—É–¥–∞—Ä—å –ë–æ–ª–∏–≤–∞—Ä"
# "VND": "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥"
# "–í–£–í": "–õ—é–¥–∏ –õ—é–¥–∏",
# "WST": "–ó–∞–ø–∞–¥–Ω–æ–µ –°–∞–º–æ–∞",
# "XAF": "–§—Ä–∞–Ω–∫ CFA BEAC"
# "XAG": "–°–µ—Ä–µ–±—Ä–æ (—Ç—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)",
# "XAU": "–ó–æ–ª–æ—Ç–æ (—Ç—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)"
# "XCD": "–í–æ—Å—Ç–æ—á–Ω–æ-–∫–∞—Ä–∏–±—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä"
# "XDR": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è",
# "XOF": "–§—Ä–∞–Ω–∫–∏ –ö–§–ê"
# "XPF": "–§—Ä–∞–Ω–∫–∏ CFP"
# "YER": "–ô–µ–º–µ–Ω—Å–∫–∏–π —Ä–µ–∞–ª",
# "ZAR": "—é–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä–∞–Ω–¥"
# "–ó–ú–ö": "–ó–∞–º–±–∏–π—Å–∫–∞—è –∫–≤–∞—á–∞ (–¥–æ 2013 –≥.)",
# "ZMW": "–ó–∞–º–±–∏—è –ö–≤–∞—á–∞",
# "ZWL": "–ó–∏–º–±–∞–±–≤–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä"

